name: Esegui Script Python per Aggiornare Dati EPG

on:
  schedule:
    # Esegui alle 00:00 UTC per ottenere i dati di ieri
    - cron: '0 0 * * *'  # Esegui ogni giorno alle 00:00 UTC (mezzanotte)
    # Esegui alle 06:00 UTC per ottenere i dati di oggi
    - cron: '0 6 * * *'  # Esegui ogni giorno alle 06:00 UTC

  push:
    branches:
      - main  # Trigger quando fai push sul branch main

jobs:
  update-dati:
    runs-on: ubuntu-latest

    steps:
    # Checkout del codice dal repository
    - name: Checkout codice
      uses: actions/checkout@v2  # Ottieni il codice dalla tua repository

    # Impostare Python
    - name: Impostare Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # Imposta la versione di Python (puoi usare 3.x per l'ultima versione)

    # Installazione delle dipendenze (opzionale)
    - name: Installare dipendenze
      run: |
        python -m pip install --upgrade pip  # Aggiorna pip
        pip install -r requirements.txt  # Installa le dipendenze dal file requirements.txt (se presente)

    # Esegui lo script di scraping
    - name: Esegui il codice di scraping
      run: |
        # Determina l'URL in base all'orario
        if [ "${GITHUB_EVENT_NAME}" == "schedule" ]; then
          current_time=$(date -u +"%H")
          
          if [ "$current_time" -eq 0 ]; then
            echo "Scraping per ieri"
            python scraping.py --data-ieri  # Passa un argomento per specificare che vogliamo i dati di ieri
          elif [ "$current_time" -eq 6 ]; then
            echo "Scraping per oggi"
            python scraping.py --data-oggi  # Passa un argomento per specificare che vogliamo i dati di oggi
          fi
        fi

    # Aggiungi e Pusha il risultato (sempre, anche se non ci sono modifiche)
    - name: Aggiungi e Pusha il risultato
      run: |
        git config --global user.name "GitHub Actions"  # Configura il nome utente
        git config --global user.email "actions@github.com"  # Configura l'email
        git add dati_programmi.json  # Aggiungi il file JSON generato

        # Crea sempre un commit, anche se non ci sono modifiche
        git commit -m "Aggiorna i dati EPG" || echo "Nessuna modifica da commettere"  # Evita errore se non ci sono modifiche

        git push  # Esegui il push delle modifiche
